-------------------------------------------------- BASE CLASS ---------------------------------------------------------
 class Car
    {
        public int HP { get; set; }
        public string Color { get; set; }

        // has a relationship
        protected CarIDInfo carIDInfo = new CarIDInfo();

        public void SetCarIDInfo(int idNum, string owner)
        {
            carIDInfo.IDNum = idNum;
            carIDInfo.Owner = owner;
        }

        public void GetCarIDInfo()
        {
            Console.WriteLine("The car has the ID of {0} and is owned by {1}", carIDInfo.IDNum, carIDInfo.Owner);
        }

        public Car(int hp, string color)
        {
            this.HP = hp;
            this.Color = color;
        }

        // default constructor
        public Car()
        {

        }

        public void ShowDetails()
        {
            Console.WriteLine("HP: " + HP + " color:" + Color);
        }

        public  virtual void Repair()
        {
            Console.WriteLine("Car was repaired");
        }

    }


----------------------------------------------------------  CHILD CLASS --------------------------------------------------
class Audi:Car
    {
        private string brand = "Audi";

        public string Model { get; set; }

        public Audi(int hp, string color, string model):base(hp, color)
        {
            this.Model = model;
        }

        public void ShowDetails()
        {
            Console.WriteLine("Brand " + brand + " HP: " + HP + " color:" + Color);
        }

        public override void Repair()
        {
            Console.WriteLine("The Audi {0} was repaired", Model);
        }
    }
----------------------------------------------------------  CHILD CLASS --------------------------------------------------

class BMW:Car
    {
        private string brand = "BMW";

        public string Model { get; set; }

        public BMW(int hp, string color, string model):base(hp, color)
        {
            this.Model = model;
        }
        

        public new void ShowDetails()
        {
            Console.WriteLine("Brand " + brand + " HP: " + HP + " color:" + Color);
        }

        public override void Repair()
        {
            Console.WriteLine("The BMW {0} was repaired", Model);
        }
    }

------------------------------------------------------------------------------------------------------------------------

if we want to further avoid inheritance of bmw class or member function we can use "sealed" keyword.

------------------------------------------------------------------------------------------------------------------------

normally we have "is a" relation eg - BMW is a Car
to add properties to class we can use "has a" relation

class CarIDInfo{
	public int IDNum {get; set;} = 0;
	public string Owner {get; set;} = "No Owner";
}

in car we can use this for defining variable

class Car{

	// has a relationship
	protected CarIDInfo carIDInfo = new CarIDInfo();
	public void SetCarIDInfo(){}
	piblic void GetCarIDInfo(){}
}

bmwObj.SetCarIDInfo(1234, "Raj");

----------------------------------------------------------------------------------------------------------------------


abstract class - we cant create object/instance of it


abstract class Shape{
	public string Name {get; set;}

	public virtual void GetInfo(){
		Console.WriteLine($"This is a {Name}");
	}

	public abstract double Volume();
}

class Cube: Shape{
	public double Length {get; set;}

	public Cube(double length){
		Name = "Cube";
		Length = length;
	}

	public override double Volume(){
		return Math.Pow(Length, 3);
	}

	public override void GetInfo(){
		base.GetInfo();
		Console.WriteLine();
	}
}

----------------------------------------------------------------------------------------------------------------------

Cube iceCube = shape as Cube;
// creates shape as a cube type 

shape is Cube 
// checks the type.

object cube1 = new Cube(7);
Cube cube2 = (Cube) cube1;
// typecasting 

----------------------------------------------------------------------------------------------------------------------
